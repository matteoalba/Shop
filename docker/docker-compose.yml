
services:
  # Database services
  order-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=admin
    ports:
      - "1433:1433"
    volumes:
      - order-data:/var/opt/mssql
    networks:
      - shop-network

  payment-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=admin
    ports:
      - "1434:1433"
    volumes:
      - payment-data:/var/opt/mssql
    networks:
      - shop-network

  stock-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=admin
    ports:
      - "1435:1433"
    volumes:
      - stock-data:/var/opt/mssql
    networks:
      - shop-network

  # Kafka services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - shop-network

  kafka:
    image: confluentinc/cp-server:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - shop-network

  # Microservices
  order-service:
    build:
      context: ../src/OrderService
      dockerfile: ShopSaga.OrderService.WebApi/Dockerfile
    depends_on:
      - order-db
      - kafka
    ports:
      - "5001:80"
    environment:
      - ConnectionStrings__OrderServiceDb=Server=order-db;Database=OrderService;User Id=sa;Password=admin;TrustServerCertificate=True
      - Kafka__BootstrapServers=kafka:29092
    networks:
      - shop-network
  payment-service:
    build:
      context: ../src/PaymentService
      dockerfile: ShopSaga.PaymentService.WebApi/Dockerfile
    depends_on:
      - payment-db
      - kafka
    ports:
      - "5002:80"
    environment:
      - ConnectionStrings__DefaultConnection=Server=payment-db;Database=PaymentDb;User Id=sa;Password=admin;TrustServerCertificate=True
      - Kafka__BootstrapServers=kafka:29092
    networks:
      - shop-network
  stock-service:
    build:
      context: ../src/StockService
      dockerfile: ShopSaga.StockService.WebApi/Dockerfile
    depends_on:
      - stock-db
      - kafka
    ports:
      - "5003:80"
    environment:
      - ConnectionStrings__DefaultConnection=Server=stock-db;Database=StockDb;User Id=sa;Password=admin;TrustServerCertificate=True
      - Kafka__BootstrapServers=kafka:29092
    networks:
      - shop-network

volumes:
  order-data:
  payment-data:
  stock-data:

networks:
  shop-network:
    driver: bridge
